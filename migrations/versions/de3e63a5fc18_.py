"""empty message

Revision ID: de3e63a5fc18
Revises: 183dfe18993b
Create Date: 2019-03-22 11:53:31.972186

"""
import uuid

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
from sqlalchemy.dialects.postgresql import UUID

revision = 'de3e63a5fc18'
down_revision = '183dfe18993b'
branch_labels = None
depends_on = None


from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship

Session = sessionmaker()
Base = declarative_base()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('document', sa.Column('local_plan_id_new', postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column('local_plan', sa.Column('id', postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column('planning_authority_plan', sa.Column('local_plan_id_new', postgresql.UUID(as_uuid=True), nullable=True))

    class PlanningAuthorityPlan(Base):

        __tablename__ = 'planning_authority_plan'

        planning_authority_id = sa.Column('planning_authority_id',  primary_key=True)
        local_plan_id = sa.Column('local_plan_id', sa.String, primary_key=True)
        local_plan_id_new = sa.Column('local_plan_id_new', UUID(as_uuid=True))

    class LocalPlan(Base):

        __tablename__ = 'local_plan'

        id = sa.Column(UUID(as_uuid=True))
        local_plan = sa.Column(sa.String(), primary_key=True)
        documents = relationship('Document')

    class Document(Base):

        __tablename__ = 'document'

        id = sa.Column(UUID(as_uuid=True), primary_key=True)
        local_plan_id = sa.Column(sa.String(64), sa.ForeignKey('local_plan.local_plan'))
        local_plan_id_new = sa.Column(UUID(as_uuid=True))

    bind = op.get_bind()
    session = Session(bind=bind)

    for plan in session.query(LocalPlan):
        plan.id = uuid.uuid4()
        for planning_auth_plan in session.query(PlanningAuthorityPlan).filter(
                PlanningAuthorityPlan.local_plan_id == plan.local_plan):
            planning_auth_plan.local_plan_id_new = plan.id
            session.add(planning_auth_plan)

        for doc in plan.documents:
            doc.local_plan_id_new = plan.id
            session.add(doc)

        session.add(plan)
        session.commit()

    op.drop_constraint('planning_authority_plan_local_plan_id_fkey', 'planning_authority_plan', type_='foreignkey')
    op.drop_constraint('planning_authority_plan_planning_authority_id_fkey', 'planning_authority_plan', type_='foreignkey')
    op.drop_constraint('planning_authority_plan_pkey', 'planning_authority_plan', type_='primary')
    op.drop_constraint('document_local_plan_id_fkey', 'document', type_='foreignkey')

    op.alter_column('document', 'local_plan_id', new_column_name='local_plan_id_old')
    op.alter_column('planning_authority_plan', 'local_plan_id', new_column_name='local_plan_id_old')

    op.alter_column('document', 'local_plan_id_new', new_column_name='local_plan_id')
    op.alter_column('planning_authority_plan', 'local_plan_id_new', new_column_name='local_plan_id')

    op.drop_constraint('local_plan_pkey', 'local_plan', type_='primary')
    op.create_primary_key('local_plan_pkey', 'local_plan', ['id'])

    op.create_primary_key('planning_authority_plan_pkey', 'planning_authority_plan', ['planning_authority_id', 'local_plan_id'])
    op.create_foreign_key('planning_authority_plan_local_plan_id_fkey', 'planning_authority_plan', 'local_plan', ['local_plan_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('planning_authority_plan_planning_authority_id_fkey', 'planning_authority_plan', 'planning_authority', ['planning_authority_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('document_local_plan_id_fkey', 'document', 'local_plan', ['local_plan_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('planning_authority_plan_local_plan_id_fkey', 'planning_authority_plan', type_='foreignkey')
    op.drop_constraint('planning_authority_plan_planning_authority_id_fkey', 'planning_authority_plan', type_='foreignkey')
    op.drop_constraint('planning_authority_plan_pkey', 'planning_authority_plan', type_='primary')
    op.drop_constraint('document_local_plan_id_fkey', 'document', type_='foreignkey')

    op.drop_constraint('local_plan_pkey', 'local_plan', type_='primary')

    op.alter_column('document', 'local_plan_id', new_column_name='local_plan_id_new')
    op.alter_column('document', 'local_plan_id_old', new_column_name='local_plan_id')
    op.alter_column('planning_authority_plan', 'local_plan_id', new_column_name='local_plan_id_new')
    op.alter_column('planning_authority_plan', 'local_plan_id_old', new_column_name='local_plan_id')

    op.create_primary_key('local_plan_pkey', 'local_plan', ['local_plan'])

    op.create_primary_key('planning_authority_plan_pkey', 'planning_authority_plan', ['planning_authority_id', 'local_plan_id'])
    op.create_foreign_key('planning_authority_plan_local_plan_id_fkey', 'planning_authority_plan', 'local_plan', ['local_plan_id'], ['local_plan'], ondelete='CASCADE')
    op.create_foreign_key('planning_authority_plan_planning_authority_id_fkey', 'planning_authority_plan', 'planning_authority', ['planning_authority_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('document_local_plan_id_fkey', 'document', 'local_plan', ['local_plan_id'], ['local_plan'], ondelete='CASCADE')

    op.drop_column('planning_authority_plan', 'local_plan_id_new')
    op.drop_column('document', 'local_plan_id_new')
    op.drop_column('local_plan', 'id')
    # ### end Alembic commands ###
