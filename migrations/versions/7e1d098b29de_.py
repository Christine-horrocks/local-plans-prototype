"""empty message

Revision ID: 7e1d098b29de
Revises: c46795c001b1
Create Date: 2019-04-04 13:59:59.102066

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.dialects.postgresql import UUID, JSON
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship

Session = sessionmaker()
Base = declarative_base()

# revision identifiers, used by Alembic.
revision = '7e1d098b29de'
down_revision = 'c46795c001b1'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('local_plan', sa.Column('housing_numbers', postgresql.JSON(astext_type=sa.Text()), nullable=True))

    class LocalPlan(Base):

        __tablename__ = 'local_plan'

        id = sa.Column(UUID(as_uuid=True), primary_key=True)
        housing_numbers = sa.Column(JSON)
        documents = relationship('Document', back_populates='local_plan')

        def get_housing_numbers(self):
            housing_numbers = []
            for doc in self.documents:
                if doc.type == 'plan_document':
                    for fact in doc.facts:
                        if 'HOUSING' in fact.fact_type:
                            housing_numbers.append(fact)
            return housing_numbers

    class Document(Base):

        __tablename__ = 'document'

        id = sa.Column(UUID(as_uuid=True), primary_key=True)
        type = sa.Column(sa.String(64))
        url = sa.Column(sa.String())
        local_plan_id = sa.Column(UUID(as_uuid=True), sa.ForeignKey('local_plan.id'))
        local_plan = relationship('LocalPlan', back_populates='documents')
        facts = relationship('Fact', back_populates='document')
        created_date = sa.Column(sa.DateTime())

    class Fact(Base):

        __tablename__ = 'fact'

        id = sa.Column(UUID(as_uuid=True), primary_key=True)
        fact = sa.Column(sa.String())
        fact_type = sa.Column(sa.String())
        from_ = sa.Column(sa.String())
        to = sa.Column(sa.String())
        notes = sa.Column(sa.String())
        document = relationship('Document', back_populates='facts')
        document_id = sa.Column(UUID(as_uuid=True), sa.ForeignKey('document.id'))
        image_url = sa.Column(sa.String())

        def __repr__(self):
            return f'{self.fact} {self.fact_type} {self.from_} {self.to}'

    bind = op.get_bind()
    session = Session(bind=bind)

    for plan in session.query(LocalPlan):
        for number in plan.get_housing_numbers():
            if 'RANGE' in number.fact_type:
                min = int(number.from_.strip().replace(',','')) if number.from_ is not None else 0
                max = int(number.to.strip().replace(',','')) if number.to is not None else 0
                data = {'housing_number_type': number.fact_type,
                        'min': min,
                        'max': max,
                        'notes': number.notes,
                        'source_document': number.document.url,
                        'image_url': number.image_url,
                        'created_date': number.document.created_date.isoformat()}
            else:
                num = int(number.fact.strip().replace(',','')) if number.fact is not None else 0
                data = {'housing_number_type': number.fact_type,
                        'number': num,
                        'notes': number.notes,
                        'source_document': number.document.url,
                        'image_url': number.image_url,
                        'created_date': number.document.created_date.isoformat()}

            plan.housing_numbers = data

            session.add(plan)
            session.commit()


    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('local_plan', 'housing_numbers')
    # ### end Alembic commands ###
