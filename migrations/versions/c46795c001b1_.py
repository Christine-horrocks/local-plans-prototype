"""empty message

Revision ID: c46795c001b1
Revises: f05f05b22995
Create Date: 2019-04-02 11:47:40.628741

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from datetime import datetime

Session = sessionmaker()
Base = declarative_base()

# revision identifiers, used by Alembic.
revision = 'c46795c001b1'
down_revision = 'f05f05b22995'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('local_plan', sa.Column('plan_end_year', sa.Date(), nullable=True))
    op.add_column('local_plan', sa.Column('plan_start_year', sa.Date(), nullable=True))

    class LocalPlan(Base):

        __tablename__ = 'local_plan'

        id = sa.Column(UUID(as_uuid=True), primary_key=True)
        title = sa.Column(sa.String())
        local_plan = sa.Column(sa.String())
        plan_start_year = sa.Column(sa.Date())
        plan_end_year = sa.Column(sa.Date())
        plan_documents = relationship('PlanDocument', back_populates='local_plan')

    class PlanDocument(Base):

        __tablename__ = 'document'

        id = sa.Column(UUID(as_uuid=True), primary_key=True)
        type = sa.Column(sa.String(64))
        local_plan_id = sa.Column(UUID(as_uuid=True), sa.ForeignKey('local_plan.id'))
        local_plan = relationship('LocalPlan', back_populates='plan_documents')

    class Fact(Base):

        __tablename__ = 'fact'

        id = sa.Column(UUID(as_uuid=True), primary_key=True)
        fact = sa.Column(sa.String())
        fact_type = sa.Column(sa.String())
        from_ = sa.Column(sa.String())
        to = sa.Column(sa.String())

        document_id = sa.Column(UUID(as_uuid=True), sa.ForeignKey('document.id'))
        document = relationship('PlanDocument')

    bind = op.get_bind()
    session = Session(bind=bind)

    for fact in session.query(Fact):
        if fact.document.type == 'plan_document':
            plan = fact.document.local_plan
            if fact.fact_type == 'PLAN_START_YEAR':
                d = fact.fact.split('-')[0]
                plan.plan_start_year = datetime.strptime(d, '%Y')
            if fact.fact_type == 'PLAN_END_YEAR':
                d = fact.fact.split('-')[0]
                plan.plan_end_year = datetime.strptime(d, '%Y')
            if fact.fact_type == 'PLAN_PERIOD':
                d_from = fact.from_.strip().split('-')[0]
                d_to = fact.to.strip().split('-')[0]
                plan.plan_start_year = datetime.strptime(d_from, '%Y')
                plan.plan_end_year = datetime.strptime(d_to, '%Y')
            if fact.fact_type == 'PLAN_NAME' and (plan.title is None or plan.title.strip() == ''):
                plan.title = fact.fact

            session.add(plan)
            session.commit()

    for plan in session.query(LocalPlan):
        if plan.title is None or plan.title.strip() == '':
            plan.title = plan.local_plan
            session.add(plan)
            session.commit()

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('local_plan', 'plan_start_year')
    op.drop_column('local_plan', 'plan_end_year')
    # ### end Alembic commands ###
