"""empty message

Revision ID: e1e8404ef481
Revises: 21cbff069e42
Create Date: 2019-03-13 16:48:10.765929

"""
import datetime
import uuid

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import sessionmaker, relationship

revision = 'e1e8404ef481'
down_revision = '21cbff069e42'
branch_labels = None
depends_on = None

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

Session = sessionmaker()
Base = declarative_base()


def _generate_uuid():
    return uuid.uuid4()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.rename_table('plan_document', 'plan_document_old')
    op.rename_table('fact', 'fact_old')

    class FactOld(Base):

        __tablename__ = 'fact_old'

        id = sa.Column(UUID(as_uuid=True), primary_key=True)
        fact = sa.Column(sa.String())
        fact_type = sa.Column(sa.String())
        notes = sa.Column(sa.String())
        plan_document_id = sa.Column(UUID(as_uuid=True), sa.ForeignKey('plan_document_old.id'))
        created_date = sa.Column(sa.DateTime())
        image_url = sa.Column(sa.String())

    class EmergingFact(Base):

        __tablename__ = 'emerging_fact'

        id = sa.Column(UUID(as_uuid=True), primary_key=True)
        fact = sa.Column(sa.String())
        fact_type = sa.Column(sa.String())
        notes = sa.Column(sa.String())
        emerging_plan_document_id = sa.Column(UUID(as_uuid=True), sa.ForeignKey('emerging_plan_document.id'))
        created_date = sa.Column(sa.DateTime())
        image_url = sa.Column(sa.String())

    class EmergingPlanDocument(Base):

        __tablename__ = 'emerging_plan_document'

        id = sa.Column(UUID(as_uuid=True), primary_key=True)
        url = sa.Column(sa.String())
        planning_authority_id = sa.Column(sa.String(64), sa.ForeignKey('planning_authority.id'))
        facts = relationship('EmergingFact')

    class PlanDocumentOld(Base):

        __tablename__ = 'plan_document_old'

        id = sa.Column(UUID(as_uuid=True), primary_key=True)
        url = sa.Column(sa.String())
        local_plan_id = sa.Column(sa.String(64), sa.ForeignKey('local_plan.local_plan'))
        facts = relationship('FactOld')


    class Document(Base):

        __tablename__ = 'document'

        id = sa.Column(UUID(as_uuid=True), primary_key=True, default=_generate_uuid)
        url = sa.Column(sa.String())
        title = sa.Column(sa.String())
        type = sa.Column(sa.String(64))

        facts = relationship('Fact', back_populates='document')

        __mapper_args__ = {
            'polymorphic_on': type,
            'polymorphic_identity': 'document'
        }

    class PlanDocument(Document):

        __mapper_args__ = {
            'polymorphic_identity': 'plan_document'
        }

        local_plan_id = sa.Column(sa.String(64))

    class OtherDocument(Document):

        __mapper_args__ = {
            'polymorphic_identity': 'other_document'
        }

        planning_authority_id = sa.Column(sa.String(64))



    class Fact(Base):

        __tablename__ = 'fact'

        id = sa.Column(UUID(as_uuid=True), primary_key=True, default=_generate_uuid)
        fact = sa.Column(sa.String())
        fact_type = sa.Column(sa.String())
        notes = sa.Column(sa.String())
        from_year = sa.Column(sa.Date())
        to_year = sa.Column(sa.Date())

        created_date = sa.Column(sa.DateTime(), default=datetime.datetime.utcnow)
        image_url = sa.Column(sa.String())

        document_id = sa.Column(UUID(as_uuid=True), sa.ForeignKey('document.id'), nullable=False)
        document = relationship('Document', back_populates='facts')


    op.create_table('document',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('url', sa.String(), nullable=True),
        sa.Column('title', sa.String(), nullable=True),
        sa.Column('type', sa.String(length=64), nullable=True),
        sa.Column('local_plan_id', sa.String(length=64), nullable=True),
        sa.Column('planning_authority_id', sa.String(length=64), nullable=True),
        sa.ForeignKeyConstraint(['local_plan_id'], ['local_plan.local_plan'], ),
        sa.ForeignKeyConstraint(['planning_authority_id'], ['planning_authority.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table('fact',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('fact', sa.String(), nullable=True),
        sa.Column('fact_type', sa.String(), nullable=True),
        sa.Column('notes', sa.String(), nullable=True),
        sa.Column('from_year', sa.Date(), nullable=True),
        sa.Column('to_year', sa.Date(), nullable=True),
        sa.Column('created_date', sa.DateTime(), nullable=True),
        sa.Column('image_url', sa.String(), nullable=True),
        sa.Column('document_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(['document_id'], ['document.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    bind = op.get_bind()
    session = Session(bind=bind)

    for doc in session.query(PlanDocumentOld):
        new_doc = PlanDocument()
        new_doc.local_plan_id = doc.local_plan_id
        new_doc.type = 'plan_document'
        new_doc.url = doc.url
        for f in doc.facts:
            new_fact = Fact()
            new_fact.fact = f.fact
            new_fact.fact_type = f.fact_type
            new_fact.notes = f.notes
            new_fact.image_url = f.image_url
            new_doc.facts.append(new_fact)

        session.add(new_doc)
        session.commit()

    for doc in session.query(EmergingPlanDocument):
        new_doc = OtherDocument()
        new_doc.planning_authority_id = doc.planning_authority_id
        new_doc.type = 'other_document'
        new_doc.url = doc.url
        for f in doc.facts:
            new_fact = Fact()
            new_fact.fact = f.fact
            new_fact.fact_type = f.fact_type
            new_fact.notes = f.notes
            new_fact.image_url = f.image_url
            new_doc.facts.append(new_fact)

        session.add(new_doc)
        session.commit()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('fact')
    op.drop_table('document')

    op.rename_table('plan_document_old', 'plan_document')
    op.rename_table('fact_old', 'fact')

# ### end Alembic commands ###
